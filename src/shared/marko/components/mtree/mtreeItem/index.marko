style.scss {
  @import "./mtreeItem.scss";
}

$ const level = parseInt(input.level, 10);
<if(input.data.isVisible)>
  <if(input.order === 0 && level === 1 && input.dragging)>
    <mtreeGap marginLeft=((level - 1) * 24) id=input.data.uuid on-gap-drop("onGapDrop") isTop=true/>
  </if>
  <div style=`margin-left:${(level - 1) * 24}px;` class="z3-mtr-tree-item" on-dragover("onItemDragOver") on-dragenter("onItemDragEnter") on-dragleave("onItemDragLeave") on-drop("onItemDrop")>
    <if(input.data.c && input.data.c.length)>
      <a href="" data-id=input.data.uuid on-click("onOpenCloseClick")>
        <if(input.data.isOpen)>
          <span class="icon">
            <i class="mdi mdi-minus-box-outline"/>
          </span>
        </if>
        <else>
          <span class="icon">
            <i class="mdi mdi-plus-box-outline"/>
          </span>
        </else>
      </a>
    </if>
    <else>
      <span class="icon" style="opacity:0">
        <i class="mdi mdi-checkbox-blank-outline"/>
      </span>
    </else>
    <a href="" data-id=input.data.uuid data-order=input.order data-len=input.len on-click("onItemClick") class=`z3-mtr-item-wrap${level > 0 ? " z3-mtr-subitem" : ""}${state.overItem ? " z3-mtr-tree-item-over" : ""}` draggable=`${input.isDraggable || false}` on-dragstart("onTreeItemDragStart") on-dragend("onTreeItemDragEnd")>
      <span class="icon z3-mtr-icon-wrap">
        <i class=`z3-mtr-icon z3-mtr-icon-folder${input.data.isOpen ? "-open" : ""}`/>
      </span>
      <span class=`z3-mtr-label${input.selected === input.data.uuid ? " z3-mtr-label-selected" : ""}`>${input.data.t || input.data.id || ""}</span>
    </a>
  </div>
  <if(input.data.c && input.data.c.length)>
    <for|item, index| of=input.data.c>
      <if(index === 0 && input.dragging && input.data.isOpen)>
        <mtreeGap marginLeft=((level + 1) * 24) id=item.uuid on-gap-drop("onGapDrop") isTop=true/>
      </if>
      <mtreeItem data=item level=(level + 1) order=index key=item.uuid on-open-close-click("onOpenCloseClick") on-item-click("onItemClick") selected=input.selected isDraggable=input.isDraggable on-gap-drop("onGapDrop") on-item-drop("onItemDropEvent") on-drag-start("onTreeItemComponentDragStart") on-drag-end("onTreeItemComponentDragEnd") dragging=input.dragging len=input.len/>
    </for>
  </if>
  <if(level > 0 && input.dragging)>
    <div style=`margin-left:${(level - 1) * 24}px;` class="z3-mtr-tree-item">
      <mtreeGap marginLeft=((level - 1) * 24) id=input.data.uuid order=input.order on-gap-drop("onGapDrop")/>
    </div>
  </if>
</if>
