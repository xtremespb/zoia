import Cookies from "../../../../shared/lib/cookies"
import filterSave from "../../../../modules/core/api/data/filterSave.json"
import widgetsSave from "./data/widgetsEdit.json"
import tableSettingsPagesFormData from "./data/tableSettingsPagesFormData.json"

style.scss {
	@import "./mtable.scss";
}

$ const cookies = new Cookies(out.global.cookieOptions);
$ const token = cookies.get(`${out.global.siteId || "zoia3"}.authToken`);
<div class="z3-mt-wrap" id=`${input.id}_wrap`>
	<div class="columns z3-ap-noselect">
		<div class="column is-four-fifths">
			<if(input.buttons && input.buttons.length)>
				<div
					class="field has-addons columns is-gapless is-multiline"
					id=`${input.id}_top_buttons`>
					<for|btn| of=input.buttons>
						<p class="z3-mt-top-control mt-1 mr-1">
							<div class=`dropdown${state.dropdownVisible[btn.id] ? " is-active" : ""}${btn.dropdownRight ? " is-right" : ""}`>
								<div class="dropdown-trigger">
									<button
										disabled=(btn.id === "btnDeleteSelectedGeneric" && !state.anyCheckboxSelected)
										class=`${btn.css} ${btn.tooltip ? " tooltip" : ""}`
										data-button=btn.id
										data-dropdown=String(!!(btn.dropdown && btn.dropdown.length))
										id=`${input.id}_${btn.id}`
										type="button"
										on-click("onTopButtonClick")
										aria-haspopup="true">
										<if(btn.icon)>
											<div class="z3-mt-icon-wrap">
												<span class="icon">
													<i class=btn.icon/>
												</span>
											</div>
										</if>
										<if(btn.displayText && btn.text)>${btn.text}</if>
									</button>
								</div>
								<if(btn.dropdown && btn.dropdown.length)>
									<div class="dropdown-menu" role="menu">
										<div class="dropdown-content">
											<for|i| of=btn.dropdown>
												<a href="" on-click("onDropdownItemClick") data-id=i.id class="dropdown-item">
													${i.label}
												</a>
											</for>
										</div>
									</div>
								</if>
							</div>
						</p>
					</for>
					<p class="z3-mt-top-control mt-1 mr-1">
						<button
							class="button is-light"
							type="button"
							on-click("onTableWidgetsClick")
							aria-haspopup="false">
							<div class="z3-mt-icon-wrap">
								<span class="icon">
									<i class="mdi mdi-widgets-outline"/>
								</span>
							</div>
							${out.global.i18n.t("mTable.tableWidgets")}
						</button>
					</p>
					<if(input.filter && input.filter.length)>
						<p class="z3-mt-top-control mt-1 mr-1">
							<div class=`dropdown is-right${
								state.dropdownVisible["filterGeneric"] ? " is-active" : ""
							}`>
								<div class="dropdown-trigger">
									<button
										class="button is-light"
										type="button"
										data-dropdown="true"
										on-click("onTopButtonClick")
										data-button="filterGeneric">
										<div class="z3-mt-icon-wrap">
											<span class="icon">
												<i class="mdi mdi-filter-outline"/>
											</span>
										</div>
										${out.global.i18n.t("mTable.filter")}
									</button>
								</div>
								<div class="dropdown-menu" role="menu">
									<div class="dropdown-content">
										<a href="" on-click("onAddFilterClick") class="dropdown-item">
											${out.global.i18n.t("mTable.addFilter")}
										</a>
										<a href="" on-click("onAddRawFilterClick") class="dropdown-item">
											${out.global.i18n.t("mTable.rawFilterEdit")}
										</a>
										<if(state.filterCurrentId)>
											<a href="" on-click("onSaveCurrentFilterSet") class="dropdown-item">
												${out.global.i18n.t("mTable.saveCurrentFilterSet")}
											</a>
										</if>
										<if(state.filters.length)>
											<a href="" on-click("onSaveCurrentFilterSetAs") class="dropdown-item">
												${out.global.i18n.t("mTable.saveCurrentFilterSetAs")}
											</a>
										</if>
										<a href="" on-click("onManageFilters") class="dropdown-item">
											${out.global.i18n.t("mTable.manageFilters")}
										</a>
										<if(state.filters.length)>
											<a href="" on-click("onRemoveAllFilters") class="dropdown-item">
												${out.global.i18n.t("mTable.removeAllFilters")}
											</a>
										</if>
									</div>
								</div>
							</div>
						</p>
					</if>
					<p class="z3-mt-top-control mt-1 mr-1">
						<button
							class="button is-light"
							type="button"
							on-click("onTableSettingsClick")
							aria-haspopup="false">
							<div class="z3-mt-icon-wrap">
								<span class="icon">
									<i class="mdi mdi-table-edit"/>
								</span>
							</div>
							${out.global.i18n.t("mTable.tableSettings")}
						</button>
					</p>
				</div>
			</if>
		</div>
		<div class="column">
			<div class="control has-icons-right mt-1">
				<input
					class="input"
					type="text"
					on-input("onSearchFieldInput")
					value=state.searchText
					id=`${input.id}_searchInput`/>
				<span class="icon is-small is-right">
					<i class="mdi mdi-magnify"/>
				</span>
			</div>
		</div>
	</div>
	<if(input.filter && input.filter.length && state.filters.length)>
		<div class="field is-grouped is-grouped-multiline mb-2 z3-ap-noselect">
			<if(state.filterCurrentId)>
				<div class="control">
					<div class="tags">
						<div class="tag is-success z3-mt-filter-meta">
							${state.filterCurrentTitle}
						</div>
					</div>
				</div>
			</if>
			<for|f, i| of=state.filters>
				<if(f.type === "raw")>
					<div class="control">
						<div class="tags has-addons z3-mt-filter-tag" data-filterindex=(i + 1)>
							<div class="tag is-info" on-click("onFilterTagClick")>
								<div class="z3-mt-filter-tag-label">
									${out.global.i18n.t("mTable.rawValue")}
								</div>
							</div>
							<a class="tag is-delete" on-click("onFilterTagDeleteClick")/>
						</div>
					</div>
				</if>
				<else>
					<div class="control">
						<div class="tags has-addons z3-mt-filter-tag" data-filterindex=(i + 1)>
							<div class="tag is-info" on-click("onFilterTagClick")>
								<div
									class="z3-mt-filter-tag-label z3-mt-filter-tag-label-short"
									data-tippy-content=`${f.label}`>
									${f.label}
								</div>
							</div>
							<span
								class="tag is-dark"
								on-click("onFilterTagClick")
								data-tippy-content=out.global.i18n.t(`mTable.filter.${f.mode}`)>
								${out.global.i18n.t(`mTable.filter.${f.mode}Short`)}
							</span>
							<div class="tag is-link" on-click("onFilterTagClick")>
								<span
									class="z3-mt-filter-tag-label"
									data-tippy-content=(f.value.label || out.global.i18n.t("mTable.filter.null"))>
									${f.value.label || out.global.i18n.t("mTable.filter.null")}
								</span>
								<if(f.value.plus > 0)>
									<span class="z3-mt-filter-tag-plus">+${f.value.plus}</span>
								</if>
							</div>
							<a class="tag is-delete" on-click("onFilterTagDeleteClick")/>
						</div>
					</div>
				</else>
			</for>
		</div>
	</if>
	<if(state.error)>
		<div class="notification is-danger z3-ap-noselect">${state.error}</div>
	</if>
	<else>
		<div class="z3-mt-table-container" id=`${input.id}_tableContainer`>
			<table class=`${input.css} z3-mt-table-wrap z3-mt-grip-resizable` id=`${input.id}_table`>
				<thead class="z3-mt-noselect z3-mt-table-head">
					<tr>
						<if(input.checkboxColumn)>
							<th style="width:43px;min-width:43px;max-width:43px">
								<div class="z3-pretty p-default z3-mt-pretty-checkbox-id">
									<input type="checkbox" on-change("setCheckboxes") checked=state.allCheckboxes/>
									<div class="state p-primary">
										<label/>
									</div>
								</div>
							</th>
						</if>
						$ let columnIndex = 1;
						<for|column| of=input.columns>
							<if(state.columnVisibility[column.id])>
								<th class=`z3-mt-th ${column.css || ""}` data-id=column.id data-index=columnIndex id=`${input.id}_th_${column.id}`>
									<div class="z3-mt-th-wrap">
										<div class=`z3-mt-th-data${column.sortable ? " z3-mt-sortable" : ""}` on-click("onColumnClick") data-id=column.id data-sortable=column.sortable>
											<div class=`z3-mt-sort mdi ${
												state.sortDirection === "asc" ? "mdi-chevron-up" : "mdi-chevron-down"
											}${state.sortId === column.id ? " z3-mt-visible" : " z3-mt-hidden"}`/>
											<span>
												${column.title}
											</span>
										</div>
										<if(column.resize)>
											<div class="z3-mt-th-resize" data-index=columnIndex on-mousedown("onColumnResizeMouseDown")>&nbsp;</div>
										</if>
									</div>
								</th>
								$ columnIndex += 1;
							</if>
						</for>
						<if(input.actions && input.actions.length)>
							<th class="z3-mt-actions-wrap">${input.actionsTitle}</th>
						</if>
					</tr>
				</thead>
				<tbody>
					<if(state.data.length)>
						<for|row| of=state.data>
							<tr>
								<if(input.checkboxColumn)>
									<td style="width:43px;min-width:43px;max-width:43px">
										<div class="z3-pretty p-icon z3-mt-pretty-checkbox-id">
											<input
												data-id=(row.id || row._id)
												type="checkbox"
												checked=state.checkboxes[`i${row.id || row._id}`]
												on-change("setCheckbox")/>
											<div class="state">
												<i class="icon mdi mdi-check"/>
												<label/>
											</div>
										</div>
									</td>
								</if>
								<for|column| of=input.columns.map(c => c.id)>
									$ const columnData = input.columns.find(c => c.id === column);
									<if(state.columnVisibility[columnData.id])>
										<td class=`${columnData.multiline ? "" : "z3-mt-td"}`>
											$!{row[column] !== null && row[column] !== undefined
											? input.processValue
												? input.processValue(row.id || row._id, row[column], column, row)
												: row[column]
											: ""}
										</td>
									</if>
								</for>
								<if(input.actions && input.actions.length)>
									<td class="z3-mt-actions-wrap">
										<for|action| of=input.actions>
											<button
												class=`${action.css} z3-mt-action-button${
													action.tooltip ? " tooltip" : ""
												}`
												id=`${input.id}_${action.id}_${row.id || row._id}`
												data-action=action.id
												data-id=(row.id || row._id)
												type="button"
												on-click("onActionButtonClick")
												data-tippy-content=action.text>
												<if(action.icon)>
													<span class="icon">
														<i class=action.icon data-action=action.id data-id=(row.id || row._id)/>
													</span>
												</if>
												<if(action.displayText && action.text)>&nbsp;${action.text}</if>
											</button>
										</for>
									</td>
								</if>
							</tr>
						</for>
					</if>
					<else>
						<if(state.loading)>
							<tr>
								<td colspan="100%">${input.i18n.t("mTable.loading")}</td>
							</tr>
						</if>
						<else>
							<tr>
								<td colspan="100%">${input.i18n.t("mTable.noData")}</td>
							</tr>
						</else>
					</else>
				</tbody>
			</table>
		</div>
		<div class="z3-mt-table-meter" id=`${input.id}_tableMeter`/>
		<if(state.paginationData.length)>
			<nav
				class="pagination is-small mb-0 mt-4"
				role="navigation"
				aria-label="pagination">
				<ul class="pagination-list">
					<for|pi| of=state.paginationData>
						<if(pi.type === "page")>
							<li>
								<a
									class=`pagination-link${pi.active ? " is-current" : ""}`
									data-page=pi.page
									on-click("onPageClick")>
									${pi.page}
								</a>
							</li>
						</if>
						<if(pi.type === "dots")>
							<li>
								<span class="pagination-ellipsis">&hellip;</span>
							</li>
						</if>
					</for>
				</ul>
			</nav>
		</if>
	</else>
	<if(state.loading)>
		<div class="z3-mt-loading">
			<span class="button is-white is-loading is-large z3-mt-loading-spinner">
				&nbsp;
			</span>
		</div>
	</if>
	<if(input.genericDelete)>
		<div class=`modal${state.deleteDialogActive ? " is-active" : ""}`>
			<div class="modal-background"/>
			<div class="modal-card">
				<header class="modal-card-head">
					<p class="modal-card-title">${input.i18n.t("mTable.deleteTitle")}</p>
					<if(!state.deleteDialogProgress)>
						<button class="delete" aria-label="close" on-click("onDeleteDialogClose")/>
					</if>
				</header>
				<section class="modal-card-body">
					<p>${input.i18n.t("mTable.deleteDesc")}:</p>
					<div class="z3-margin-top">
						${state.deleteDialogTitles.map(i => `"${i}"`).join(", ")}
					</div>
				</section>
				<footer class="modal-card-foot">
					<fieldset disabled=state.deleteDialogProgress>
						<button
							class=`button is-primary${
								state.deleteDialogProgress ? " is-loading" : ""
							}`
							id=`${input.id}_deleteConfirmButton`
							on-click("onDeleteDialogSubmit")>
							${input.i18n.t("mTable.delete")}
						</button>
						<button class="button is-light" on-click("onDeleteDialogClose")>
							${input.i18n.t("mTable.cancel")}
						</button>
					</fieldset>
				</footer>
			</div>
		</div>
	</if>
	<!-- Add/Edit Filter modal: start -->
	<if(input.filter && input.filter.length)>
		<div class=`modal${state.filterDialogActive ? " is-active" : ""}`>
				<div class="modal-background" on-click("onFilterDialogClose")/>
				<div class="modal-card">
					<form on-submit("onFilterFormSubmit")>
						<header class="modal-card-head">
							<p class="modal-card-title">
								${state.filterDialogEdit !== null
								? input.i18n.t("mTable.editFilter")
								: input.i18n.t("mTable.addFilter")}
							</p>
							<if(!state.deleteDialogProgress)>
								<button
									class="delete"
									type="button"
									aria-label="close"
									on-click("onFilterDialogClose")/>
							</if>
						</header>
						<section class="modal-card-body">
							<if(state.filterError)>
								<div class="notification is-danger">${state.filterError}</div>
							</if>
							<div class="select is-fullwidth">
								<select on-change("onFilterSelectChange")>
									<option value="" selected=(state.filterSelected === "")>&ndash;</option>
									<if(input.filter && input.filter.length)>
										<for|f| of=input.filter>
											<option value=f.id selected=(state.filterSelected === f.id)>
												${f.label}
											</option>
										</for>
									</if>
								</select>
							</div>
							<div class=`select is-fullwidth mt-2 mb-2${
								state.filterSelected === "" ? " is-hidden" : ""
							}`>
								<select on-change("onFilterModeSelectChange")>
									<for|f| of=(state.filterSelectedData.modes || [
										"equals",
										"notEquals",
										"isLike",
										"notLike",
										"oneOf",
										"noneOf",
										"greaterThan",
										"greaterThanOrEquals",
										"lessThan",
										"lessThanOrEquals"
									])>
										<if(
											(!f.match(/^larger/) && !f.match(/^smaller/)) ||
											state.filterSelectedData.isNumber
										)>
											<option value=f selected=(state.filterMode === f)>
												${input.i18n.t(`mTable.filter.${f}`)}
											</option>
										</if>
									</for>
								</select>
							</div>
							<mselect
								key=`${input.id}_mselect`
								active=(state.filterSelectedData.type === "select")/>
							<div class=(state.filterSelectedData.type !== "input" ? "is-hidden" : "")>
								<input
									class="input"
									type="text"
									value=state.filterValue
									on-change("onFilterValueChange")
									placeholder=input.i18n.t("mTable.filterValue")/>
							</div>
							<div class=(state.filterSelectedData.type !== "date" ? "is-hidden" : "")>
								<mcalendar
									id=`${input.id}_filterDate`
									key=`${input.id}_filterDate`
									on-value-change("onFilterCalendarValueChange")/>
							</div>
						</section>
						<footer class="modal-card-foot">
							<fieldset>
								<button class="button is-primary" type="submit">
									${state.filterDialogEdit !== null
									? input.i18n.t("mTable.save")
									: input.i18n.t("mTable.add")}
								</button>
								<button class="button is-dialog-secondary" type="button" on-click("onFilterDialogClose")>
									${input.i18n.t("mTable.cancel")}
								</button>
							</fieldset>
						</footer>
					</form>
				</div>
			</div>
	</if>
	<!-- Add/Edit Filter modal: end -->
	<!-- Manage Filter modal: start -->
	<if(state.filterManageDialogActive)>
		<div class="modal is-active">
			<div class="modal-background" on-click("onFilterManageDialogClose")/>
			<div class="modal-card">
				<header class="modal-card-head">
					<p class="modal-card-title">${input.i18n.t("mTable.manageFilters")}</p>
					<button class="delete" aria-label="close" on-click("onFilterManageDialogClose")/>
				</header>
				<div class="modal-card-body">
					<if(state.filterManageDialogError)>
						<div class="notification is-danger mb-2">
							${state.filterManageDialogError}
						</div>
					</if>
					<div
						class="z3-mt-filter-spinner-wrap"
						style=(state.filterManageDialogLoading ? "display:flex" : "display:none")>
						<div class="z3-mt-filter-spinner">
							<div/>
							<div/>
							<div/>
							<div/>
						</div>
					</div>
					<div
						style=(state.filterManageDialogLoading ? "display:none" : "")
						class="columns is-variable is-1">
						<div class="column is-narrow z3-mt-filter-manage-buttons">
							<div>
								<button
									class="button is-light is-fullwidth"
									disabled=(state.filterManageSelected.length !== 1)
									on-click("onFilterSetLoadClick")>
									${out.global.i18n.t("mTable.filter.loadSelected")}
								</button>
							</div>
							<div>
								<button
									class="button is-light mt-2 is-fullwidth"
									disabled=(state.filterManageSelected.length !== 1)
									on-click("onFilterSetEditClick")>
									${out.global.i18n.t("mTable.filter.editSelected")}
								</button>
							</div>
							<div>
								<button
									class="button mt-2 is-danger is-fullwidth"
									disabled=(state.filterManageSelected.length === 0)
									on-click("onFilterDeleteClick")>
									${out.global.i18n.t("mTable.filter.deleteSelected")}
								</button>
							</div>
						</div>
						<div class="column">
							<mselect
								key=`${input.id}_mselect_filter`
								active=true
								css="z3-mt-filter-mselect"
								on-value-change("onMSelectFilterChange")/>
						</div>
					</div>
				</div>
				<footer class="modal-card-foot">
					<button class="button is-dialog-secondary" on-click("onFilterManageDialogClose")>
						${out.global.i18n.t("btnCloseGeneric")}
					</button>
				</footer>
			</div>
		</div>
	</if>
	<!-- Manage Filter modal: end -->
	<!-- Edit Filter modal: start -->
	<div class=`modal${state.filterEditDialogActive ? " is-active" : ""}`>
		<div class="modal-background" on-click("onFilterEditDialogClose")/>
		<div class="modal-card">
			<div class="modal-card-body">
				<mform
					manual=true
					key=`${input.id}_filterEditForm`
					id=`${input.id}_filterEditForm`
					fields=[
						{
							id: "title",
							type: "text",
							label: out.global.i18n.t("mTable.filterTitle"),
							helpText: out.global.i18n.t("mTable.filterTitleHelpText"),
							autoFocus: true,
							mandatory: true
						},
						{
							id: "type",
							type: "select",
							label: out.global.i18n.t("mTable.filterType"),
							options: [
								{
									value: 1,
									label: out.global.i18n.t("mTable.filterType.local")
								},
								{
									value: 2,
									label: out.global.i18n.t("mTable.filterType.global")
								}
							],
							wrapCSS: "z3-is-large",
							css: "is-fullwidth",
							defaultValue: 1,
							convert: "integer",
							mandatory: true
						},
						{
							id: "div1",
							type: "divider"
						},
						{
							id: "bg1",
							type: "buttons",
							data: [
								{
									id: "btnSave",
									type: "button",
									buttonType: "submit",
									label: out.global.i18n.t("mTable.save"),
									css: "is-primary"
								},
								{
									id: "btnCancel",
									type: "button",
									buttonType: "button",
									label: out.global.i18n.t("mTable.cancel"),
									css: "is-light",
								}
							]
						}
					]
					validation=filterSave
					i18n=out.global.i18n
					progressButtonId="btnSave"
					on-button-click("onFilterEditFormButtonClick")/>
			</div>
		</div>
	</div>
	<!-- Edit Filter modal: end -->
	<!-- Raw Filter modal: start -->
	<div class=`modal${state.filterRawDialogActive ? " is-active" : ""}`>
		<div class="modal-background" on-click("onFilterRawDialogClose")/>
		<div class="modal-card">
			<header class="modal-card-head">
				<p class="modal-card-title">${input.i18n.t("mTable.rawValue")}</p>
				<button class="delete" aria-label="close" on-click("onFilterRawDialogClose")/>
			</header>
			<div class="modal-card-body">
				<div class="tags are-medium">
					<if(input.filter && input.filter.length)>
						<for|f| of=input.filter>
							<span
								class="tag z3-mt-filter-raw-tag"
								data-id=f.id
								on-click("onFilterRawTagClick")>
								${f.label}
							</span>
						</for>
					</if>
				</div>
				<mform
					manual=true
					key=`${input.id}_filterRawForm`
					id=`${input.id}_filterRawForm`
					fields=[
						{
							id: "value",
							type: "ace",
							label: out.global.i18n.t("mTable.rawValue"),
							helpText: out.global.i18n.t("mTable.rawValueHelpText"),
							wysiwyg: false,
							source: true,
							autoFocus: true,
							aceOptions: {
								mode: "ace/mode/json"
							}
						}
					]
					i18n=out.global.i18n
					on-button-click("onFilterRawFormButtonClick")/>
			</div>
			<footer class="modal-card-foot">
				<div class="buttons">
					<button type="button" class="button is-primary" on-click("onFilterRawSaveClick")>${out.global.i18n.t("mTable.save")}</button>
					<button type="button" class="button is-dialog-secondary" on-click("onFilterRawDialogClose")>${out.global.i18n.t("mTable.cancel")}</button>
				</div>
			</footer>
		</div>
	</div>
	<!-- Raw Filter modal: end -->
	<!-- Settings modal: start -->
	<div class=`modal${state.tableSettingsDialogActive ? " is-active" : ""}`>
		<div class="modal-background" on-click("onTableSettingsDialogClose")/>
		<div class="modal-card" id=`${input.id}_settingsDialogModalCard`>
			<header class="modal-card-head">
				<p class="modal-card-title">${input.i18n.t("mTable.tableSettings")}</p>
				<button class="delete" aria-label="close" on-click("onTableSettingsDialogClose")/>
			</header>
			<div class="modal-card-body">
				<div class="tabs">
					<ul>
					  <li class=(state.tableSettingsDialogTab === "columns" ? "is-active" : "")><a on-click("onSettingsDialogTabClick") data-id="columns">${input.i18n.t("mTable.settingsColumns")}</a></li>
					  <li class=(state.tableSettingsDialogTab === "pages" ? "is-active" : "")><a on-click("onSettingsDialogTabClick") data-id="pages">${input.i18n.t("mTable.settingsPages")}</a></li>
					</ul>
				</div>
				<div style=(state.tableSettingsDialogTab === "columns" ? {} : {display: "none"})>
					<mselect
						key=`${input.id}_config_columns`
						active=true/>
				</div>	
				<div style=(state.tableSettingsDialogTab === "pages" ? {} : {display: "none"})>
					<mform
						manual=true
						key=`${input.id}_tableSettingsPagesForm`
						id=`${input.id}_tableSettingsPagesForm`
						fields=[
							[{
								id: "paginationMode",
								type: "select",
								label: out.global.i18n.t("mTable.paginationMode"),
								options: [
									{
										value: "dynamic",
										label: out.global.i18n.t("mTable.paginationMode.dynamic")
									},
									{
										value: "fixed",
										label: out.global.i18n.t("mTable.paginationMode.fixed")
									}
								],
								mandatory: true,
								css: "is-fullwidth",
								wrapCSS: "z3-is-medium",
							},
							{
								id: "itemsPerPage",
								type: "text",
								label: out.global.i18n.t("mTable.itemsPerPage"),
								helpText: out.global.i18n.t("mTable.itemsPerPageHelpText"),
								convert: "integer",
								wrapCSS: "z3-is-small",
								mandatory: true
							}]
						]
						validation=tableSettingsPagesFormData
						on-form-submit("onTableSettingsPagesFormSubmit")
						i18n=out.global.i18n/>
				</div>	
			</div>
			<footer class="modal-card-foot">
				<div class="buttons">
					<button type="button" class="button is-primary" on-click("onTableSettingsDialogSave")>${out.global.i18n.t("mTable.save")}</button>
					<button type="button" class="button is-dialog-secondary" on-click("onTableSettingsDialogClose")>${out.global.i18n.t("mTable.cancel")}</button>
				</div>
			</footer>
		</div>
	</div>
	<!-- Settings modal: end -->
	<!-- Manage Widgets modal: start -->
	<div class=`modal${state.widgetsManageDialogActive ? " is-active" : ""}`>
		<div class="modal-background" on-click("onWidgetsManageDialogClose")/>
		<div class="modal-card">
			<header class="modal-card-head">
				<p class="modal-card-title">${input.i18n.t("mTable.manageWidgets")}</p>
				<button class="delete" aria-label="close" on-click("onWidgetsManageDialogClose")/>
			</header>
			<div class="modal-card-body">
				<if(state.widgetsManageDialogError)>
					<div class="notification is-danger mb-2">
						${state.widgetsManageDialogError}
					</div>
				</if>
				<div
					class="z3-mt-widgets-spinner-wrap"
					style=(state.widgetsManageDialogLoading ? "display:flex" : "display:none")>
					<div class="z3-mt-widgets-spinner">
						<div/>
						<div/>
						<div/>
						<div/>
					</div>
				</div>
				<div
					style=(state.widgetsManageDialogLoading ? "display:none" : "")
					class="columns is-variable is-1">
					<div class="column is-narrow z3-mt-widgets-manage-buttons">
						<div>
							<button
								class="button is-light is-fullwidth"
								on-click("onAddWidgetClick")>
								${out.global.i18n.t("mTable.widgets.add")}
							</button>
						</div>
						<div>
							<button
								class="button is-light mt-2 is-fullwidth"
								disabled=(state.widgetsManageSelected.length !== 1)
								on-click("onEditWidgetClick")>
								${out.global.i18n.t("mTable.widgets.editSelected")}
							</button>
						</div>
						<div>
							<button
								class="button mt-2 is-danger is-fullwidth"
								disabled=(state.widgetsManageSelected.length === 0)
								on-click("onWidgetsDeleteClick")>
								${out.global.i18n.t("mTable.widgets.deleteSelected")}
							</button>
						</div>
					</div>
					<div class="column">
						<mselect
							key=`${input.id}_mselect_widgets`
							active=true
							css="z3-mt-widgets-mselect"
							on-value-change("onMSelectWidgetsChange")/>
					</div>
				</div>
			</div>
			<footer class="modal-card-foot">
				<div class="buttons">
				<button class="button is-primary" on-click("onWidgetsManageDialogSubmit") disabled=state.widgetsManageDialogLoading>
					${out.global.i18n.t("mTable.widgets.save")}
				</button>
				<button class="button is-dialog-secondary" on-click("onWidgetsManageDialogClose") disabled=state.widgetsManageDialogLoading>
					${out.global.i18n.t("btnCloseGeneric")}
				</button>
				</div>
			</footer>
		</div>
	</div>
	<!-- Manage Widgets modal: end -->
	<!-- Edit Filter modal: start -->
	<div class=`modal${state.widgetsEditDialogActive ? " is-active" : ""}`>
		<div class="modal-background" on-click("onWidgetsEditDialogClose")/>
		<div class="modal-card">
			<header class="modal-card-head">
				<p class="modal-card-title">${input.i18n.t(state.widgetEdit !== null ? "mTable.widgetEdit" : "mTable.widgetAdd")}</p>
				<button class="delete" aria-label="close" on-click("onWidgetsEditDialogClose")/>
			</header>
			<div class="modal-card-body">
				<mform
					manual=true
					key=`${input.id}_widgetsEditForm`
					id=`${input.id}_widgetsEditForm`
					fields=[
						{
							id: "title",
							type: "text",
							label: out.global.i18n.t("mTable.widgetTitle"),
							helpText: out.global.i18n.t("mTable.widgetTitleHelpText"),
							autoFocus: true,
							mandatory: true
						},
						{
							id: "type",
							type: "select",
							label: out.global.i18n.t("mTable.widgetType"),
							options: [
								{
									value: "static",
									label: out.global.i18n.t("mTable.widgetType.static")
								},
								{
									value: "query",
									label: out.global.i18n.t("mTable.widgetType.query")
								}
							],
							wrapCSS: "z3-is-large",
							css: "is-fullwidth",
							defaultValue: "static",
							mandatory: true
						},
						{
							id: "value",
							type: "ace",
							label: out.global.i18n.t("mTable.widgetValue"),
							helpText: out.global.i18n.t("mTable.widgetValueHelpText"),
							wysiwyg: false,
							source: true,
						}
					]
					validation=widgetsSave
					i18n=out.global.i18n
					on-form-submit("onWidgetEditFormSubmit")/>
			</div>
			<footer class="modal-card-foot">
				<div class="buttons">
				<button class="button is-primary" on-click("onWidgetsEditDialogSave")>
					${out.global.i18n.t("mTable.widgets.save")}
				</button>
				<button class="button is-dialog-secondary" on-click("onWidgetsEditDialogClose")>
					${out.global.i18n.t("btnCloseGeneric")}
				</button>
				</div>
			</footer>
		</div>
	</div>
	<!-- Edit Filter modal: end -->
	<mnotify key=`${input.id}_mnotify` id=`${input.id}_mnotify`/>
	<mconfirm
		key=`${input.id}_filterDeleteConfirm`
		on-confirm("onFilterDeleteConfirm")/>
	<mconfirm
		key=`${input.id}_widgetsDeleteConfirm`
		on-confirm("onWidgetsDeleteConfirm")/>	
</div>
